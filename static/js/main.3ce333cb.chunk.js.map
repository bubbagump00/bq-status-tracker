{"version":3,"sources":["1f9d0.svg","1f611.svg","1f92f.svg","1f635.svg","1f913.svg","1f44f-1f3fc.svg","1f973.svg","VerseCalculator/VerseCalculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","qualifyDate","Date","numVersesToQualify","CalculatorResultLogo","props","numVersesMemorized","src","monocle","className","alt","numDaysUntilQualify","daysUntilQualify","Math","ceil","xeyes","nerd","expressionless","mindblown","clapping","CalculatorResultText","versesToMemorizePerWeek","presentDate","round","getTime","VerseCalculator","handleChange","bind","state","e","this","setState","target","value","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ce333cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1f9d0.ece62835.svg\";","module.exports = __webpack_public_path__ + \"static/media/1f611.4f57f212.svg\";","module.exports = __webpack_public_path__ + \"static/media/1f92f.d62050c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/1f635.08cf46d4.svg\";","module.exports = __webpack_public_path__ + \"static/media/1f913.c61131c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/1f44f-1f3fc.786ec4e2.svg\";","module.exports = __webpack_public_path__ + \"static/media/1f973.f3e30796.svg\";","import React from 'react';\nimport monocle from './../1f9d0.svg';\nimport expressionless from './../1f611.svg';\nimport mindblown from './../1f92f.svg';\nimport xeyes from './../1f635.svg';\nimport nerd from './../1f913.svg';\nimport party from './../1f973.svg';\nimport clapping from './../1f44f-1f3fc.svg';\n\nconst qualifyDate = new Date(2020, 0, 19);\nconst numVersesToQualify = 130;\n\nfunction CalculatorResultLogo(props) {\n  if (props.numVersesMemorized === '') {\n    return <img src={monocle} className=\"App-logo\" alt=\"moncole\" />;\n  }\n  else if (props.numVersesMemorized ==0) {\n    const numDaysUntilQualify = daysUntilQualify(qualifyDate);\n    const versesToMemorizePerWeek = Math.ceil((numVersesToQualify-props.numVersesMemorized)/numDaysUntilQualify*7);\n    return <img src={xeyes} className=\"App-logo\" alt=\"xeyes\" />;\n  }\n  else if (props.numVersesMemorized >=1 && props.numVersesMemorized <130) {\n    const numDaysUntilQualify = daysUntilQualify(qualifyDate);\n    const versesToMemorizePerWeek = Math.ceil((numVersesToQualify-props.numVersesMemorized)/numDaysUntilQualify*7);\n    return <img src={nerd} className=\"App-logo\" alt=\"nerd\" />;\n  }\n  else if (props.numVersesMemorized < 0) {\n    return <img src={expressionless} className=\"App-logo\" alt=\"expressionless\" />;\n  }\n  else if (props.numVersesMemorized >= 130 && props.numVersesMemorized <550) {\n    return <img src={mindblown} className=\"App-logo\" alt=\"mindblown\" />;\n  }\n  else if (props.numVersesMemorized >= 550) {\n    return <img src={clapping} className=\"App-logo\" alt=\"clapping\" />;\n  }\n  return <img src={monocle} className=\"App-logo\" alt=\"moncole\" />\n}\n\nfunction CalculatorResultText(props) {\n  if (props.numVersesMemorized === '') {\n    return null;\n  }\n  else if (props.numVersesMemorized >=0 && props.numVersesMemorized <130) {\n    const numDaysUntilQualify = daysUntilQualify(qualifyDate);\n    const versesToMemorizePerWeek = Math.ceil((numVersesToQualify-props.numVersesMemorized)/numDaysUntilQualify*7);\n    return <p className=\"hot\">You need to memorize {versesToMemorizePerWeek} verses per week to qualify for the tournament!</p>;\n  }\n  else if (props.numVersesMemorized < 0) {\n    return <p className=\"normal\">No. Just no. We're not doing this right now.</p>;\n  }\n  else if (props.numVersesMemorized >= 130 && props.numVersesMemorized <550) {\n    return <p className=\"normal\">...what is happening right now? Is this even real life? You qualified, kid.</p>;\n  }\n  else if (props.numVersesMemorized >= 550) {\n    return <p className=\"normal\">Congratulations, you're grounded for lying.</p>;\n  }\n  return null;\n}\n\nfunction daysUntilQualify(qualifyDate) {\n    // One day Time in ms (milliseconds)\n    const oneDayInMS = 1000 * 60 * 60 * 24;\n    const presentDate = new Date();\n    return Math.round(qualifyDate.getTime() - presentDate.getTime()) / (oneDayInMS);\n  }\n\nclass VerseCalculator extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = {numVersesMemorized: ''};\n    }\n\n  handleChange(e) {\n      this.setState({numVersesMemorized: e.target.value});\n    }\n\n  render() {\n    const numVersesMemorized = this.state.numVersesMemorized;\n    return (\n      <header className=\"App-header\">\n        <CalculatorResultLogo numVersesMemorized={numVersesMemorized} />\n        <br />\n        <h5>You need to memorize 130 verses by January 19, 2020 to qualify for the next tournament.</h5>\n        <div>\n          <fieldset>\n            <legend>Enter the number of verses you have already memorized:</legend>\n            <input\n              value={numVersesMemorized}\n              onChange={this.handleChange} />\n\n            <CalculatorResultText numVersesMemorized={numVersesMemorized} />\n\n          </fieldset>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default VerseCalculator;\n","import React from 'react';\nimport VerseCalculator from './VerseCalculator/VerseCalculator'\nimport {Emoji, Twemoji} from 'react-emoji-render';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <VerseCalculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}